version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: dvs-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: dvs_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Hardhat Local Blockchain
  hardhat:
    build:
      context: ./contracts
      dockerfile: Dockerfile
    container_name: dvs-hardhat
    ports:
      - "8545:8545"
    command: npx hardhat node
    volumes:
      - ./contracts:/app
      - /app/node_modules

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: dvs-backend
    environment:
      NODE_ENV: development
      PORT: 4000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: dvs_dev
      DB_USER: postgres
      DB_PASSWORD: postgres
      BLOCKCHAIN_RPC_URL: http://hardhat:8545
      JWT_SECRET: dev_secret_change_in_production
      ENABLE_BLOCKCHAIN_LISTENER: "true"
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      hardhat:
        condition: service_started
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run dev

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: dvs-frontend
    environment:
      VITE_API_BASE_URL: http://localhost:4000/api
      VITE_VOTER_REGISTRY_ADDRESS: "0x5FbDB2315678afecb367f032d93F642f64180aa3"
      VITE_ELECTION_MANAGER_ADDRESS: "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"
    ports:
      - "7000:7000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev

  # IPFS Node (optional)
  ipfs:
    image: ipfs/kubo:latest
    container_name: dvs-ipfs
    ports:
      - "5001:5001"
      - "8080:8080"
    volumes:
      - ipfs_data:/data/ipfs

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: dvs-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Grafana (Monitoring Dashboard)
  grafana:
    image: grafana/grafana:latest
    container_name: dvs-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_SECURITY_ADMIN_USER: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus

volumes:
  postgres_data:
  ipfs_data:
  prometheus_data:
  grafana_data:
